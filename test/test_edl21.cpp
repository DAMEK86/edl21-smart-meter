#include <unity.h>
#include <encode.h>

Edl21 enc;

uint8_t testdata[]={
	0x1B, 0x1B, 0x1B, 0x1B, 0x01, 0x01, 0x01, 0x01, 0x76, 0x05, 0x0A, 0xCD, 0x26, 0xF6, 0x62, 0x00, 0x62, 0x00, 
	0x72, 0x63, 0x01, 0x01, 0x76, 0x01, 0x01, 0x05, 0x03, 0x99, 0xB7, 0xA8, 0x0B, 0x06, 0x49, 0x53, 0x4B, 0x01, 
	0x0B, 0xCB, 0x21, 0xA1, 0xDA, 0x01, 0x01, 0x63, 0x8C, 0x01, 0x00, 0x76, 0x05, 0x0A, 0xCD, 0x26, 0xF7, 0x62, 
	0x00, 0x62, 0x00, 0x72, 0x63, 0x07, 0x01, 0x77, 0x01, 0x0B, 0x06, 0x49, 0x53, 0x4B, 0x01, 0x0B, 0xCB, 0x21, 
	0xA1, 0xDA, 0x07, 0x01, 0x00, 0x62, 0x0A, 0xFF, 0xFF, 0x72, 0x62, 0x01, 0x65, 0x06, 0x11, 0x3B, 0xD6, 0x7D, 
	0x77, 0x07, 0x81, 0x81, 0xC7, 0x82, 0x03, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x04, 0x49, 0x53, 0x4B, 0x01, 0x77, 
	0x07, 0x01, 0x00, 0x00, 0x00, 0x09, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x0B, 0x06, 0x49, 0x53, 0x4B, 0x01, 0x0B, 
	0xCB, 0x21, 0xA1, 0xDA, 0x01, 0x77, 0x07, 0x01, 0x00, 0x01, 0x08, 0x00, 0xFF, 0x65, 0x00, 0x01, 0x01, 0xA2, 
	0x01, 0x62, 0x1E, 0x52, 0xFF, 0x59, 0x00, 0x00, 0x00, 0x00, 0x04, 0x8A, 0x04, 0x76, 0x01, 0x77, 0x07, 0x01, 
	0x00, 0x01, 0x08, 0x01, 0xFF, 0x01, 0x01, 0x62, 0x1E, 0x52, 0xFF, 0x59, 0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 
	0x3C, 0xBD, 0x01, 0x77, 0x07, 0x01, 0x00, 0x01, 0x08, 0x02, 0xFF, 0x01, 0x01, 0x62, 0x1E, 0x52, 0xFF, 0x59, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x67, 0xC7, 0xB9, 0x01, 0x77, 0x07, 0x01, 0x00, 0x02, 0x08, 0x00, 0xFF, 0x65, 
	0x00, 0x01, 0x01, 0xA2, 0x01, 0x62, 0x1E, 0x52, 0xFF, 0x59, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x5D, 0x3D, 0xA2, 
	0x01, 0x77, 0x07, 0x01, 0x00, 0x02, 0x08, 0x01, 0xFF, 0x01, 0x01, 0x62, 0x1E, 0x52, 0xFF, 0x59, 0x00, 0x00, 
	0x00, 0x00, 0x0B, 0x5D, 0x3D, 0xA2, 0x01, 0x77, 0x07, 0x01, 0x00, 0x02, 0x08, 0x02, 0xFF, 0x01, 0x01, 0x62, 
	0x1E, 0x52, 0xFF, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x77, 0x07, 0x01, 0x00, 0x10, 
	0x07, 0x00, 0xFF, 0x01, 0x01, 0x62, 0x1B, 0x52, 0x00, 0x55, 0xFF, 0xFF, 0xFF, 0xBF, 0x01, 0x77, 0x07, 0x01, 
	0x00, 0x24, 0x07, 0x00, 0xFF, 0x01, 0x01, 0x62, 0x1B, 0x52, 0x00, 0x55, 0xFF, 0xFF, 0xFF, 0xD2, 0x01, 0x77, 
	0x07, 0x01, 0x00, 0x38, 0x07, 0x00, 0xFF, 0x01, 0x01, 0x62, 0x1B, 0x52, 0x00, 0x55, 0xFF, 0xFF, 0xFF, 0xD1, 
	0x01, 0x77, 0x07, 0x01, 0x00, 0x4C, 0x07, 0x00, 0xFF, 0x01, 0x01, 0x62, 0x1B, 0x52, 0x00, 0x55, 0x00, 0x00, 
	0x00, 0x1C, 0x01, 0x77, 0x07, 0x81, 0x81, 0xC7, 0x82, 0x05, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x83, 0x02, 0x61, 
	0xB6, 0xAD, 0x78, 0x4D, 0x32, 0x83, 0x4F, 0x03, 0x21, 0xAB, 0x9D, 0x65, 0x22, 0xE5, 0x94, 0x00, 0x27, 0x07, 
	0x65, 0xBB, 0x5F, 0x7D, 0x2E, 0x41, 0x7D, 0x6B, 0xEA, 0x33, 0xD0, 0x72, 0xD0, 0xC0, 0x5E, 0xBF, 0x31, 0xB6, 
	0xFD, 0x79, 0xE3, 0x29, 0xA3, 0x52, 0x3D, 0x95, 0x42, 0x2D, 0x7E, 0x01, 0x01, 0x01, 0x63, 0x88, 0x62, 0x00, 
	0x76, 0x05, 0x0A, 0xCD, 0x26, 0xF8, 0x62, 0x00, 0x62, 0x00, 0x72, 0x63, 0x02, 0x01, 0x71, 0x01, 0x63, 0x28, 
	0xCD, 0x00, 0x1B, 0x1B, 0x1B, 0x1B, 0x1A, 0x00, 0x00, 0x00,};

void test_function_find_Start(void) {
    TEST_ASSERT_EQUAL(0, enc.FindStartIndexInSequence(testdata, sizeof(testdata) / sizeof(unsigned char)));
}

void test_function_find_Escape(void) {
    TEST_ASSERT_EQUAL(452, enc.FindEscapeIndexInSequence(testdata, sizeof(testdata) / sizeof(unsigned char)));
}

void test_function_calc_currentPowerValue(void) {
	TEST_ASSERT_EQUAL(-47, enc.FindPowerInSequence(testdata, sizeof(testdata), enc.PowerL2Sequence, sizeof(enc.PowerL2Sequence)));
}

int main(int argc, char **argv) {
    UNITY_BEGIN();
    RUN_TEST(test_function_find_Start);
    RUN_TEST(test_function_find_Escape);
	RUN_TEST(test_function_calc_currentPowerValue);
    UNITY_END();

    return 0;
}
